{
  "active": true,
  "connections": {
    "Edit Fields": {
      "main": [
        [
          {
            "node": "generate Sitemap",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "generate Sitemap": {
      "main": [
        [
          {
            "node": "Clean the URLS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clean the URLS": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        []
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-12-12T10:43:57.564Z",
  "id": "OTj2iG0Vwk9A6NFT",
  "meta": null,
  "name": "Generate SitemapðŸŸ¢",
  "nodes": [
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8b296bcc-a83b-4a9d-90df-e8960c70f6d3",
              "name": "domain",
              "value": "={{ $json.query.url.startsWith('https://') ? $json.query.url : `https://${$json.query.url}` }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        80,
        -20
      ],
      "id": "cf89c319-6cee-498f-b6d1-229b37441776",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "jsCode": "const axios = require('axios');\nconst cheerio = require('cheerio');\nconst { URL } = require('url');\n\nasync function crawlDomain(domain) {\n  const visited = new Set(); // Set to store visited URLs\n  const toVisit = [domain]; // URLs to visit\n  const allUrls = []; // All collected URLs\n\n  // Loop through URLs to visit\n  while (toVisit.length > 0) {\n    const currentUrl = toVisit.pop();\n    if (visited.has(currentUrl)) continue; // Skip if already visited\n\n    visited.add(currentUrl); // Mark the URL as visited\n    console.log(`Crawling: ${currentUrl}`);  // Log current URL being crawled\n\n    try {\n      // Fetch the page content\n      const response = await axios.get(currentUrl, { timeout: 5000 });\n\n      const $ = cheerio.load(response.data);\n\n      // Add the current URL to the list of all URLs\n      allUrls.push(currentUrl);\n      console.log(`Found URL: ${currentUrl}`); // Log the found URL\n\n      // Find all links on the page\n      $('a[href]').each((_, element) => {\n        let href = $(element).attr('href');\n        if (!href) return;\n\n        // Handle relative URLs by converting them to absolute URLs\n        if (href.startsWith('/')) {\n          href = new URL(href, domain).href;\n        }\n\n        // Only add internal links to the list of URLs to visit\n        if (href.startsWith(domain) && !visited.has(href)) {\n          toVisit.push(href);\n          console.log(`Adding to visit: ${href}`);  // Log URL being added to visit\n        }\n      });\n    } catch (error) {\n      console.error(`Error crawling ${currentUrl}: ${error.message}`);\n    }\n  }\n\n  return allUrls;\n}\n\nasync function generateSitemap(domain) {\n  const urls = await crawlDomain(domain);\n\n  // Log the total number of URLs found\n  console.log(`Total URLs found: ${urls.length}`);\n\n  // Create the sitemap XML\n  const sitemap = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n  ${urls\n    .map(url => `\n      <url>\n        <loc>${url}</loc>\n        <lastmod>${new Date().toISOString()}</lastmod>\n        <priority>0.5</priority>\n      </url>\n    `)\n    .join('')}\n  </urlset>`;\n\n  return sitemap; // Return sitemap as a string\n}\n\n// Get the domain from previous Set node\nconst domain = $json[\"domain\"]; // Replace with your domain input\n\n// Generate the sitemap\nreturn generateSitemap(domain)\n  .then(sitemap => {\n    // Return the sitemap in a valid JSON format for n8n\n    return [{ sitemap: sitemap }];\n  })\n  .catch(error => {\n    console.error('Error generating sitemap:', error.message);\n    return [{ error: error.message }];\n  });\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        240,
        -20
      ],
      "id": "3d2fe51d-f129-439b-a59c-965a634dda03",
      "name": "generate Sitemap"
    },
    {
      "parameters": {
        "jsCode": "const rawXML = $json.sitemap;\n\n// Import xml2js to parse the XML string\nconst xml2js = require('xml2js');\n\n// Parse the XML string\nlet urlsArray = [];\n\nxml2js.parseString(rawXML, (err, result) => {\n  if (err) {\n    throw new Error('Failed to parse XML');\n  }\n\n  // Extract the URLs from the parsed XML\n  const urls = result.urlset.url;\n\n  // Loop through the URLs and push them into the array\n  urls.forEach(url => {\n    if (url.loc && url.loc[0]) {\n      urlsArray.push(url.loc[0]);\n    }\n  });\n});\n\n// Return the list of URLs\nreturn [\n  {\n    urls: urlsArray\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        420,
        -20
      ],
      "id": "8185ec34-4f17-4f63-9c3e-825360401a26",
      "name": "Clean the URLS"
    },
    {
      "parameters": {
        "fieldToSplitOut": "urls",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        600,
        -20
      ],
      "id": "3381ec18-a25f-4750-9249-4df87e54c4bb",
      "name": "Split Out"
    },
    {
      "parameters": {
        "path": "4a85c711-e73b-44c9-a146-c4263e0ad9cd",
        "responseMode": "lastNode",
        "responseData": "allEntries",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -120,
        -20
      ],
      "id": "d4fc5983-869c-4d03-bcba-977c244504af",
      "name": "Webhook",
      "webhookId": "4a85c711-e73b-44c9-a146-c4263e0ad9cd"
    },
    {
      "parameters": {
        "content": "## Usage\n\nRun this on a self hosted n8n instance\n\nCall this webhook endpoint with a `query` as `url` eg \n\n`https://dev.funautomations.io/webhook/4a85c711-d?url=funautomations.io`\n\n- You might need to install each of these axios\ncheerio\n\n- Enable external modules on your n8n by adding these settings to your ENV before you can run this workflow\n\n`NODE_FUNCTION_ALLOW_BUILTIN=*\n NODE_FUNCTION_ALLOW_EXTERNAL=*`\n",
        "height": 400,
        "width": 360
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -500,
        -80
      ],
      "typeVersion": 1,
      "id": "f8e0ced8-bb71-4ce8-9789-3f4235d8f283",
      "name": "Sticky Note"
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "dev.funautomations.io",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36",
            "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
            "accept-encoding": "gzip, deflate, br, zstd",
            "accept-language": "en-US,en;q=0.9",
            "cache-control": "max-age=0",
            "cookie": "rl_page_init_referrer=RudderEncrypt%3AU2FsdGVkX1%2FLHd6cK7pqIa49VQV2fIwPkCoTWA%2B6BlE%3D; rl_page_init_referring_domain=RudderEncrypt%3AU2FsdGVkX1%2Bx%2BlILyHtTpV%2FgHd%2FK%2F3IhtdT3oeVbOng%3D; n8n-auth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjZkMmY3ZWFmLTJlYjMtNDZkMS05MWYwLTgzZjQyZWIxZDJlMiIsImhhc2giOiJmN0xSSVAwczhUIiwiYnJvd3NlcklkIjoiUlVLdTlBRTZ4Yk94V3Robnl4S2ozME56RjNXaUw3QXBvWXh6TDdnQXBBbz0iLCJpYXQiOjE3MzM4NjAwNzAsImV4cCI6MTczNDQ2NDg3MH0.sIDKoJSbmYHic3lbOCISI1VNvU2xtMfiaSgtkO4qKbc; rl_anonymous_id=RudderEncrypt%3AU2FsdGVkX19CkHbTaNfu0NCjFAwUJpC%2BZCkHtqL29Nh2ViFcuaNzeLtGKQCmpht%2B%2Bu2T%2F5lW5Qa8Rqc1AIbfmQ%3D%3D; rl_user_id=RudderEncrypt%3AU2FsdGVkX18uRh6Ivwn0a4DSATO%2Bz0f%2B2s%2BGqYTrv2n%2FVbL3XzIYR0oP1ZOzp%2BDBQikpIODgYiB3FClt63KVczsCSVOiu6PyGHbaayzzUYgG4nNlixmpBzqdcnBuX5%2BGIAiFt3rO1Q5ikgr%2BTETvZuCYwxdkfJkYWkg6RjKZp6k%3D; rl_trait=RudderEncrypt%3AU2FsdGVkX1%2BjK5P4kUP2g0bk75APKd5xXnHmsvY9Rs%2BF64HoZS4wCGUmLraSgLO3BjwPN5vc70vCN5shHn6qs99UDEHBfaBwSK8iFJVTkg4ZFT53MyjU8DLY0w%2FCnRUM7%2FbBHtG92e0bEzo6c7KKMQ%3D%3D; ph_phc_4URIAm1uYfJO7j8kWSe0J8lc8IqnstRLS7Jx8NcakHo_posthog=%7B%22distinct_id%22%3A%22db80165df40cb07c0377167c050b3f9ab0b0fb04f0e8cae0dc53f5a8527103ca%236d2f7eaf-2eb3-46d1-91f0-83f42eb1d2e2%22%2C%22%24sesid%22%3A%5B1734012363377%2C%220193baf0-2b41-7737-82a0-1edc7517b655%22%2C1734008122177%5D%2C%22%24epp%22%3Atrue%2C%22%24initial_person_info%22%3A%7B%22r%22%3A%22%24direct%22%2C%22u%22%3A%22https%3A%2F%2Fdev.funautomations.io%2Fsignout%22%7D%7D; rl_session=RudderEncrypt%3AU2FsdGVkX18umYUxl3pR%2F9yuszp07EwTORF3%2BOn0lBJcQD5U%2Fync%2BRCrtxKgycd7O0NaLJddCdd78TLdkNKb6yGyMG8jdNP7u3gIER6OQ7c%2FXttzo7WVvdmOwPUNQFzXaCN86mSY9EKkm5ZalgefLQ%3D%3D",
            "dnt": "1",
            "if-none-match": "W/\"2aa4-mqi/w7xS3ukeZI+U47yeF0z9tzE\"",
            "priority": "u=0, i",
            "sec-ch-ua": "\"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"",
            "sec-ch-ua-mobile": "?0",
            "sec-ch-ua-platform": "\"Windows\"",
            "sec-fetch-dest": "document",
            "sec-fetch-mode": "navigate",
            "sec-fetch-site": "none",
            "sec-fetch-user": "?1",
            "upgrade-insecure-requests": "1",
            "x-forwarded-for": "102.219.208.122",
            "x-forwarded-host": "dev.funautomations.io",
            "x-forwarded-proto": "https"
          },
          "params": {},
          "query": {
            "url": "funautomations.io"
          },
          "body": {},
          "webhookUrl": "https://dev.funautomations.io/webhook/4a85c711-e73b-44c9-a146-c4263e0ad9cd",
          "executionMode": "production"
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1",
    "errorWorkflow": "UFY8E1UxgEppEMpW"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-12-03T14:36:18.275Z",
      "updatedAt": "2024-12-03T14:36:18.275Z",
      "id": "koKAFcp5uch8EPTB",
      "name": "Public"
    },
    {
      "createdAt": "2024-12-04T12:32:00.284Z",
      "updatedAt": "2024-12-04T12:32:00.284Z",
      "id": "bNah9fcKNwQQBzJ1",
      "name": "SEO DOCTOR"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-12-13T12:52:31.404Z",
  "versionId": "ed0ca4f5-9f16-4b83-9e94-46b6f79dbb8e"
}