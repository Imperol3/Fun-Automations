{
  "active": true,
  "connections": {
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Get and prepare report",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Get_analytics_data": {
      "ai_tool": [
        [
          {
            "node": "Get and prepare report",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Calculator": {
      "ai_tool": [
        [
          {
            "node": "Get and prepare report",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Call Search Console Tool": {
      "ai_tool": [
        [
          {
            "node": "Get and prepare report",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "On Page SEO analysis": {
      "ai_tool": [
        [
          {
            "node": "Get and prepare report",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "SEND EMAIL REPORT": {
      "ai_tool": [
        [
          {
            "node": "SEO Report AGENTüé°üé°2",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Get and prepare report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "SEO Report AGENTüé°üé°2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Sort2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sort2": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Report": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields4": {
      "main": [
        [
          {
            "node": "Sort4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sort4": {
      "main": [
        [
          {
            "node": "Summarize by Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Page Report": {
      "main": [
        [
          {
            "node": "Edit Fields4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Merge Reportsü™Æ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Summarize by Page": {
      "main": [
        [
          {
            "node": "split by pageLocation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "split by pageLocation": {
      "main": [
        [
          {
            "node": "Do Sum‚ûï",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate2": {
      "main": [
        [
          {
            "node": "Merge Reportsü™Æ",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Reportsü™Æ": {
      "main": [
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Do Sum‚ûï": {
      "main": [
        [
          {
            "node": "Aggregate2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Get fields‚úÖ": {
      "main": [
        [
          {
            "node": "techical analyis ‚úÖ",
            "type": "main",
            "index": 0
          },
          {
            "node": "Create Markdown‚úÖ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Markdown‚úÖ": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Aggregate1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "techical analyis ‚úÖ": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set fields - Consruct API CALL": {
      "main": [
        [
          {
            "node": "Search Console - Get Custom Insights",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set fields - Create searchConsoleDataArray": {
      "main": [
        [
          {
            "node": "Array aggregation - response to AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Console - Get Custom Insights": {
      "main": [
        [
          {
            "node": "Set fields - Create searchConsoleDataArray",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get and prepare report": {
      "main": [
        [
          {
            "node": "SEO Report AGENTüé°üé°2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-12-08T08:20:32.196Z",
  "id": "BhFQwPyJWAFXSk49",
  "meta": null,
  "name": "SEO AGENT -üëæüü¢",
  "nodes": [
    {
      "parameters": {
        "model": "openai/gpt-4o-mini",
        "options": {
          "baseURL": "https://openrouter.ai/api/v1"
        }
      },
      "id": "4834426b-9b91-4bff-8e9a-ede29b867bd9",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        -220,
        100
      ],
      "credentials": {
        "openAiApi": {
          "id": "1JBBIaXSHGKDHZKq",
          "name": "Openrouter‚úÖ"
        }
      }
    },
    {
      "parameters": {
        "name": "Get_analytics_data",
        "description": "call this tool to get the google analytics data for processing",
        "workflowId": {
          "__rl": true,
          "mode": "list",
          "value": "As0qUqQXGYegkTzg",
          "cachedResultName": "Google Analytics Agentü§ñ - Reports"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.3,
      "position": [
        -40,
        100
      ],
      "id": "63f96b81-b27f-4904-93c4-5e0de3e59acc",
      "name": "Get_analytics_data"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolCalculator",
      "typeVersion": 1,
      "position": [
        420,
        100
      ],
      "id": "7e548139-8f72-4bea-a9b4-5637a26101ed",
      "name": "Calculator"
    },
    {
      "parameters": {
        "name": "SearchConsoleRequestTool",
        "description": "Call this tool when you need to get the website_list or custom_insights",
        "workflowId": {
          "__rl": true,
          "mode": "list",
          "value": "3cqI9b3Y76oNjyg3",
          "cachedResultName": "Search Console Agent Tool‚öíÔ∏è‚öíÔ∏è"
        },
        "specifyInputSchema": true,
        "jsonSchemaExample": "{\"property\": \"https://funautomations.io/\", \"request_type\": \"custom_insights\", \"startDate\": \"2024-11-07\", \"endDate\": \"2024-12-07\", \"dimensions\": [\"page\"], \"rowLimit\": 100}"
      },
      "id": "383367e3-a10c-448b-a1c5-869124ea6fd0",
      "name": "Call Search Console Tool",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "position": [
        140,
        100
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "name": "get_analysys",
        "description": "call this tool to get the technical analysis for the page",
        "workflowId": {
          "__rl": true,
          "mode": "list",
          "value": "oxV1W4FJCsngcOVu",
          "cachedResultName": "Technical Analysis agent‚úÖ"
        }
      },
      "id": "eeeea34d-dcd3-4c2c-ba37-7635fc792494",
      "name": "On Page SEO analysis",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [
        300,
        100
      ]
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Send email report to the SEO manager",
        "sendTo": "kimothozacharia5@gmail.com",
        "subject": "={{ $fromAI(\"subject\") }}",
        "message": "={{ $fromAI(\"SEO_Report\") }}",
        "options": {
          "appendAttribution": false,
          "senderName": "SEO Team"
        }
      },
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        780,
        80
      ],
      "id": "42e34942-4635-404d-b3fd-6d87069ebffd",
      "name": "SEND EMAIL REPORT",
      "webhookId": "fbaf3833-dfc7-4809-a64e-9e22884c90bd",
      "credentials": {
        "gmailOAuth2": {
          "id": "8PS0qVYNzZvoWNA7",
          "name": "phoenix‚úÖ"
        }
      }
    },
    {
      "parameters": {
        "content": "### Comprehensive Guide to Your SEO AGENT Workflow\n\nThis guide is designed to help you understand, set up, and run the `SEO AGENT -üé°üëæüëæ` workflow in n8n effectively.\n\n---\n\n#### 1. Understanding the Workflow:\n- **Overview:** The primary objective of this workflow is to automate the process of generating detailed SEO and analytics reports based on chat inputs, using various tools and APIs.\n\n##### Nodes and their Functions:\n1. **When chat message received:**\n- **Function:** Triggered when a chat message is received.\n- **Input:** Chat message data.\n- **Output:** Passes to the SEO Report AGENT.\n\n2. **OpenAI Chat Model:**\n- **Function:** Utilizes OpenAI's chat model to process input data.\n- **Input:** Chat message from the first node.\n- **Output:** Chat responses are generated.\n\n3. **Postgres Chat Memory:**\n- **Function:** Stores chat history in a PostgreSQL database for future reference.\n- **Input:** Chat messages.\n- **Output:** Historical chat data.\n\n4. **Get_analytics_data:**\n- **Function:** Calls another workflow to retrieve Google Analytics data for analysis.\n- **Input:** Triggered by the reports generation request.\n- **Output:** Analytics data results.\n\n5. **Calculator:**\n- **Function:** Performs calculations as needed in the report generation.\n- **Input:** Usage depends on the calculations required.\n- **Output:** Calculation results that can be included in the report.\n\n6. **SEO Report AGENTüé°üé°:**\n- **Function:** Generates an SEO report based on the inputs received.\n- **Input:** Data from analysis tools and chat input.\n- **Output:** Detailed SEO and analytics report.\n\n7. **Call Search Console Tool:**\n- **Function:** Retrieves insights from Google Search Console.\n- **Input:** Parameters for the desired insights.\n- **Output:** Search console performance data.\n\n8. **On Page SEO analysis:**\n- **Function:** Analyzes a specific webpage to provide SEO feedback.\n- **Input:** URL of the page to analyze.\n- **Output:** Analysis results.\n\n9. **SEND EMAIL REPORT:**\n- **Function:** Sends the compiled report to a specified email address.\n- **Input:** The generated report content and the recipient's email.\n- **Output:** Confirmation of email sent.\n\n---\n\n#### 2. Setup Instructions:\n- **Prerequisites:**\n- An n8n account setup.\n- API keys from OpenAI and Google Analytics.\n- PostgreSQL database credentials for storage.\n- Gmail OAuth setup for sending emails.\n\n##### Step-by-step Setup:\n1. **Import the Workflow:**\n- Copy the JSON workflow definition.\n- Go to n8n and import the workflow.\n\n2. **Configure Nodes:**\n- For **OpenAI Chat Model**, enter your OpenAI API key credentials.\n- Set up database connection for **Postgres Chat Memory** using your PostgreSQL database credentials.\n- Input the correct API Keys in the parameters for the **Get_analytics_data** and **Call Search Console Tool** nodes.\n- Update email parameters in the **SEND EMAIL REPORT** node with your recipient‚Äôs email.\n\n3. **Test Each Node:**\n- Run each node individually to ensure they are configured correctly and return the expected output.\n\n---\n\n#### 3. Use Case Examples:\n- **Use Cases:**\n- Generate periodic SEO reports for a website.\n- Analyze website performance metrics over time.\n- Provide detailed SEO insights based on historical data.\n\n- **Relevant Industries:**\n- Digital Marketing Agencies.\n- E-commerce Businesses.\n- Content Management Platforms.\n- SEO Specialist Consultants.\n\n- **Practical Value:** This workflow combines data retrieval, analysis, and reporting, enabling professionals to generate actionable insights and recommendations to improve web performance and SEO strategy efficiently.\n\n---\n\n#### 4. Running and Troubleshooting:\n- **How to Run the Workflow:**\n- After configuring the workflow, use the **Execute Workflow** button in n8n to start.\n- Monitor live executions in the n8n dashboard.\n\n- **Troubleshooting Tips:**\n- Ensure all API keys and credentials are correctly set.\n- Check for any network issues affecting API calls.\n- Review logs for error messages in n8n‚Äôs execution history and troubleshoot based on those logs.\n\n---\n\nThis guide offers a comprehensive overview of setting up and maximizing the utility of the SEO AGENT workflow in n8n, catering both to beginners and advanced users with clear instructions and contextual understanding.",
        "height": 620,
        "width": 560
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2200,
        -40
      ],
      "typeVersion": 1,
      "id": "4d473ace-b5bb-4b40-80bb-173b9ceec226",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "weeks",
              "triggerAtDay": [
                1
              ],
              "triggerAtHour": 12,
              "triggerAtMinute": 9
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -460,
        -280
      ],
      "id": "d2fa17f0-c980-47f8-90c2-387ef0199f3f",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4fd06917-c824-4fff-b560-8dd111ca571a",
              "name": "prompt",
              "value": "Provide a detailed report that contains as much and relevant info as possible from our analytics and search console data\n\nProvide a conclusion with a list of main takeaways from this report. What does it mean? What does this represent? Are we growing or not?",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -240,
        -280
      ],
      "id": "71feb3f8-ccfd-4a16-bba0-50e8da60b416",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=From the received report.. Can you draft an HTML email and send the result via email to the Admin\n\n{{ $json.output || $json.text}}",
        "options": {
          "systemMessage": "You are a helpful assistant\n\n<html>\n<head>\n    <style>\n        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n        h1, h2, h3 { color: #0073e6; margin-bottom: 10px; }\n        .container { width: 80%; margin: auto; padding: 20px; }\n        .header { background: #f4f4f4; padding: 10px 0; text-align: center; }\n        .footer { text-align: center; margin-top: 20px; font-size: 0.9em; color: #777; }\n        table { width: 100%; border-collapse: collapse; margin: 20px 0; }\n        th, td { padding: 10px; border: 1px solid #ddd; text-align: left; }\n        th { background-color: #0073e6; color: #fff; }\n        td { background-color: #f9f9f9; }\n        .highlight { font-weight: bold; color: #d9534f; }\n        .cta-button { background-color: #0073e6; color: white; padding: 10px 20px; border: none; border-radius: 5px; text-decoration: none; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>Google Analytics Insights & Performance Report</h1>\n        </div>\n\n        <h2>Executive Summary</h2>\n        <p><span class=\"highlight\">Overall Performance:</span> We saw strong performance from direct traffic with high user engagement. Organic sources have potential for growth.</p>\n\n        <h2>Traffic & Source Analysis</h2>\n        <table>\n            <tr>\n                <th>Traffic Source</th>\n                <th>Total Users</th>\n                <th>Engagement (Pages Viewed)</th>\n            </tr>\n            <tr>\n                <td>Direct</td>\n                <td>90</td>\n                <td>7</td>\n            </tr>\n            <tr>\n                <td>Organic</td>\n                <td>31</td>\n                <td>7</td>\n            </tr>\n            <tr>\n                <td>Referral</td>\n                <td>4</td>\n                <td>3</td>\n            </tr>\n            <tr>\n                <td>Paid</td>\n                <td>50</td>\n                <td>5</td>\n            </tr>\n        </table>\n\n        <h2>Key Recommendations</h2>\n        <ul>\n            <li>Improve SEO on high-traffic but underperforming pages.</li>\n            <li>Focus on improving conversion rates from organic traffic sources.</li>\n            <li>Optimize referral traffic by improving content alignment with user needs.</li>\n        </ul>\n\n        <h2>Opportunities for Growth</h2>\n        <ul>\n            <li>Target high-performing segments with personalized content to increase engagement.</li>\n            <li>Focus on organic traffic growth by optimizing landing pages and enhancing content relevance.</li>\n        </ul>\n\n        <div class=\"cta\">\n            <p><a href=\"#\" class=\"cta-button\">Schedule a Discussion</a></p>\n        </div>\n\n        <div class=\"footer\">\n            <p>Thank you for reviewing the insights. For further details, feel free to reach out!</p>\n        </div>\n    </div>\n</body>\n</html>\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        580,
        -260
      ],
      "id": "53c69d7a-c5f3-462f-8c3b-900ec6952731",
      "name": "SEO Report AGENTüé°üé°2",
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "options": {
          "baseURL": "https://openrouter.ai/api/v1"
        }
      },
      "id": "bfac139e-bb86-470c-b4d1-216a0455d2f8",
      "name": "OpenAI Chat Model1",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        580,
        80
      ],
      "credentials": {
        "openAiApi": {
          "id": "1JBBIaXSHGKDHZKq",
          "name": "Openrouter‚úÖ"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "423a0873-620b-4695-8f0b-baede3b9c17f",
              "name": "date",
              "value": "={{ $json.date.toDateTime().format('yyyy-MM-dd') }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1460,
        -500
      ],
      "id": "9d494a49-ab43-40bf-96b6-1ae735699cad",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "sortFieldsUi": {
          "sortField": [
            {
              "fieldName": "date"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.sort",
      "typeVersion": 1,
      "position": [
        1620,
        -500
      ],
      "id": "1bcba12d-4957-4a51-8284-edff7b3871fb",
      "name": "Sort2"
    },
    {
      "parameters": {
        "content": "## Get user Report for the Last 30 Days",
        "height": 220,
        "width": 740,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1220,
        -560
      ],
      "typeVersion": 1,
      "id": "385b7f36-9c16-489c-9198-a6cac629312d",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "propertyId": {
          "__rl": true,
          "value": "468997767",
          "mode": "list",
          "cachedResultName": "funautomations.io",
          "cachedResultUrl": "https://analytics.google.com/analytics/web/#/p468997767/"
        },
        "dateRange": "last30days",
        "metricsGA4": {
          "metricValues": [
            {
              "listName": "eventCount"
            },
            {},
            {
              "listName": "active1DayUsers"
            },
            {
              "listName": "active28DayUsers"
            },
            {
              "listName": "screenPageViews"
            },
            {
              "listName": "userEngagementDuration"
            },
            {
              "listName": "sessions"
            }
          ]
        },
        "dimensionsGA4": {
          "dimensionValues": [
            {}
          ]
        },
        "returnAll": true,
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.googleAnalytics",
      "typeVersion": 2,
      "position": [
        1260,
        -500
      ],
      "id": "55d55978-b2db-461b-b6d5-14ab809a0a05",
      "name": "Get Report",
      "credentials": {
        "googleAnalyticsOAuth2": {
          "id": "vn2PksmnwxJ1e01s",
          "name": "Google Analytics account‚úÖ"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "423a0873-620b-4695-8f0b-baede3b9c17f",
              "name": "date",
              "value": "={{ $json.date.toDateTime().format('yyyy-MM-dd') }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1440,
        -260
      ],
      "id": "e5229cfd-c75f-4a2b-a57c-26b40a3b7e18",
      "name": "Edit Fields4"
    },
    {
      "parameters": {
        "sortFieldsUi": {
          "sortField": [
            {
              "fieldName": "date"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.sort",
      "typeVersion": 1,
      "position": [
        1600,
        -260
      ],
      "id": "e8e2ee83-4ddb-4b2c-b5cf-2c28c88ce92e",
      "name": "Sort4"
    },
    {
      "parameters": {
        "content": "## Get Page Report for the Last 30 Days",
        "height": 220,
        "width": 1260,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1220,
        -300
      ],
      "typeVersion": 1,
      "id": "0351c548-63be-481f-ac90-be852eaa5f36",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "propertyId": {
          "__rl": true,
          "value": "399795563",
          "mode": "list",
          "cachedResultName": "www.mailsafi.com - GA4",
          "cachedResultUrl": "https://analytics.google.com/analytics/web/#/p399795563/"
        },
        "dateRange": "last30days",
        "metricsGA4": {
          "metricValues": [
            {
              "listName": "eventCount"
            },
            {},
            {
              "listName": "active1DayUsers"
            },
            {
              "listName": "active28DayUsers"
            },
            {
              "listName": "screenPageViews"
            },
            {
              "listName": "userEngagementDuration"
            },
            {
              "listName": "sessions"
            }
          ]
        },
        "dimensionsGA4": {
          "dimensionValues": [
            {},
            {
              "listName": "pageLocation"
            },
            {
              "listName": "country"
            },
            {
              "listName": "deviceCategory"
            }
          ]
        },
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.googleAnalytics",
      "typeVersion": 2,
      "position": [
        1260,
        -260
      ],
      "id": "72090033-7534-408a-9405-bed7700a16d5",
      "name": "Get Page Report",
      "credentials": {
        "googleAnalyticsOAuth2": {
          "id": "vn2PksmnwxJ1e01s",
          "name": "Google Analytics account‚úÖ"
        }
      }
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "eventCount"
            },
            {
              "fieldToAggregate": "totalUsers"
            },
            {
              "fieldToAggregate": "active1DayUsers"
            },
            {
              "fieldToAggregate": "active28DayUsers"
            },
            {
              "fieldToAggregate": "userEngagementDuration"
            },
            {
              "fieldToAggregate": "sessions"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1800,
        -500
      ],
      "id": "6eae443c-ef5a-4257-b1a1-ab67f119b83e",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "date"
            },
            {
              "aggregation": "concatenate",
              "field": "country"
            },
            {
              "aggregation": "concatenate",
              "field": "eventCount"
            },
            {
              "aggregation": "concatenate",
              "field": "totalUsers"
            },
            {
              "aggregation": "concatenate",
              "field": "active1DayUsers"
            },
            {
              "aggregation": "concatenate",
              "field": "active28DayUsers"
            },
            {
              "aggregation": "concatenate",
              "field": "screenPageViews"
            },
            {
              "aggregation": "concatenate",
              "field": "userEngagementDuration"
            },
            {
              "aggregation": "concatenate",
              "field": "sessions"
            }
          ]
        },
        "fieldsToSplitBy": "pageLocation",
        "options": {}
      },
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1,
      "position": [
        1780,
        -260
      ],
      "id": "906e1188-32bd-402c-9182-10484a511942",
      "name": "Summarize by Page"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "12122cf0-ba7e-4890-9c75-650b52d281d1",
              "name": "pageLocation",
              "value": "={{ $json.pageLocation }}",
              "type": "string"
            },
            {
              "id": "69507c32-3aee-41de-98ab-46ab49806e6e",
              "name": "date",
              "value": "={{ $json.concatenated_date.split(\",\") }}",
              "type": "array"
            },
            {
              "id": "4a7607c5-202b-4c19-b2af-893a85d9c12d",
              "name": "Total Countries",
              "value": "={{ $json.concatenated_country.split(\",\") }}",
              "type": "array"
            },
            {
              "id": "cea431cc-d095-4a87-948f-6c920147370d",
              "name": "Total Events",
              "value": "={{ $json.concatenated_eventCount.split(\",\") }}",
              "type": "array"
            },
            {
              "id": "710c4ae3-bf19-4096-ad4e-53639ac16434",
              "name": "Total Users",
              "value": "={{ $json.concatenated_totalUsers.split(\",\") }}",
              "type": "array"
            },
            {
              "id": "c2c265c0-6398-4b7a-b476-6c3348acdcd7",
              "name": "active1 DayUsers",
              "value": "={{ $json.concatenated_active1DayUsers .split(\",\") }}",
              "type": "array"
            },
            {
              "id": "1897ca4e-2bd7-423a-ba51-49cfcce95e53",
              "name": "active28DayUsers",
              "value": "={{ $json.concatenated_active28DayUsers .split(\",\") }}",
              "type": "array"
            },
            {
              "id": "d2544c3f-fade-40f2-9d5e-8441d5329273",
              "name": "screenPageViews",
              "value": "={{ $json.concatenated_screenPageViews .split(\",\") }}",
              "type": "array"
            },
            {
              "id": "13fc0783-b9ad-4120-aaf7-f5f6afc455e5",
              "name": "userEngagementDuration",
              "value": "={{ $json.concatenated_userEngagementDuration .split(\",\") }}",
              "type": "array"
            },
            {
              "id": "199944f0-794a-487a-9251-7c7a31d9114e",
              "name": "sessions",
              "value": "={{ $json.concatenated_sessions .split(\",\") }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1940,
        -260
      ],
      "id": "ac042d28-1cb3-48c2-bbc4-a770cdcdbdab",
      "name": "split by pageLocation"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        2280,
        -260
      ],
      "id": "77c1075b-74bd-4f6a-8a5b-f432c2a532a7",
      "name": "Aggregate2"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        2140,
        -480
      ],
      "id": "23b41452-2c25-4df9-909c-11bf5aaafbe9",
      "name": "Merge Reportsü™Æ"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "response",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        2320,
        -480
      ],
      "id": "13190f82-b52b-446c-9772-c91ecf3d49a0",
      "name": "Response"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a61dcd80-509f-4444-a97e-45ba406fbe97",
              "name": "pageLocation",
              "value": "={{ $json.pageLocation }}",
              "type": "string"
            },
            {
              "id": "be2c42da-c33a-43c3-b223-332484112e67",
              "name": "Days",
              "value": "={{ $json.date .length}}",
              "type": "number"
            },
            {
              "id": "b268943c-2616-49f0-b006-330b09e84179",
              "name": "Total Countries",
              "value": "={{ $json['Total Countries'].length }}",
              "type": "number"
            },
            {
              "id": "e8c6a356-95f5-4878-b41d-c30de9d48f59",
              "name": "Total Events",
              "value": "={{ $json['Total Events'].map(Number).reduce((sum, currentValue) => sum + currentValue, 0) }}",
              "type": "number"
            },
            {
              "id": "ec9a3730-f33f-4ce4-8219-d345ad6bef84",
              "name": "Total Users",
              "value": "={{ $json['Total Users'].map(Number).reduce((sum, currentValue) => sum + currentValue, 0) }}",
              "type": "number"
            },
            {
              "id": "ad91b20e-3a0b-4194-ad79-901959fcdc9f",
              "name": "active28DayUsers",
              "value": "={{ $json.active28DayUsers .map(Number).reduce((sum, currentValue) => sum + currentValue, 0) }}",
              "type": "number"
            },
            {
              "id": "b6c6d85f-6a8d-4626-aac2-359c2664016c",
              "name": "Total screenPageViews",
              "value": "={{ $json.screenPageViews.map(Number).reduce((sum, currentValue) => sum + currentValue, 0) }}",
              "type": "number"
            },
            {
              "id": "e17a3320-8e69-426b-99d3-8c8759968105",
              "name": "Total userEngagement Duration",
              "value": "={{ $json.userEngagementDuration .map(Number).reduce((sum, currentValue) => sum + currentValue, 0) }}",
              "type": "number"
            },
            {
              "id": "819e10a8-22f1-42c0-9ca4-1d9e10b1ca6d",
              "name": "sessions",
              "value": "={{ $json.sessions.map(Number).reduce((sum, currentValue) => sum + currentValue, 0) }}",
              "type": "number"
            }
          ]
        },
        "options": {
          "ignoreConversionErrors": true
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2140,
        -260
      ],
      "id": "7cc3a6c4-1d5d-4b87-992b-3b7d627b63fe",
      "name": "Do Sum‚ûï"
    },
    {
      "parameters": {
        "content": "## Merge and aggregate the data",
        "height": 220,
        "width": 480,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2000,
        -560
      ],
      "typeVersion": 1,
      "id": "8758d3c7-e2a9-480e-b3c1-f65b101f9ef2",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "##",
        "height": 480,
        "width": 1260
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1220,
        -560
      ],
      "typeVersion": 1,
      "id": "dbb0f249-9a06-4573-968b-a670bc4cd594",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "## Analytics Agent",
        "height": 80
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1760,
        -600
      ],
      "typeVersion": 1,
      "id": "14317ea7-b220-4456-a572-3272be5c0b78",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8cf122c2-6b60-433e-b3a9-90bd800186f3",
              "name": "url",
              "value": "={{ ($json['Enter URL'] || $json.query) ? ((($json['Enter URL'] || $json.query).startsWith('https://') ? '' : 'https://') + ($json['Enter URL'] || $json.query)) : '' }}",
              "type": "string"
            },
            {
              "id": "475dd504-85ad-4c08-b858-4ad0bcf4f682",
              "name": "variable",
              "value": "={{ $json.params.variable }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1300,
        120
      ],
      "id": "84a27217-81e2-465e-914b-9e32796d4ddb",
      "name": "Set Get fields‚úÖ"
    },
    {
      "parameters": {
        "jsCode": "const axios = require('axios');\nconst cheerio = require('cheerio');\n\n// Function to fetch the page content\nasync function fetchPage(url) {\n    try {\n        const response = await axios.get(url, {\n            headers: {\n                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n                'Accept-Language': 'en-US,en;q=0.9',\n            },\n        });\n        return response.data;\n    } catch (error) {\n        throw new Error(`Failed to fetch URL: ${url} - ${error.message}`);\n    }\n}\n\n// Function to extract clean content (headings, paragraphs, and main body)\nfunction extractMainContent(html) {\n    const $ = cheerio.load(html);\n\n    // Remove unwanted elements like scripts, styles, and forms\n    $('script, style, noscript, form, iframe, footer, header, nav, aside').remove();\n\n    // Extract body content (headings and paragraphs only)\n    let cleanContent = '';\n    \n    // Extract headings\n    $('h1, h2, h3, h4, h5, h6').each((i, el) => {\n        cleanContent += `\\n# ${$(el).text().trim()}\\n\\n`;\n    });\n\n    // Extract paragraphs\n    $('p').each((i, el) => {\n        cleanContent += `${$(el).text().trim()}\\n\\n`;\n    });\n\n    // Optionally extract other elements (like lists)\n    $('ul, ol').each((i, el) => {\n        $(el).find('li').each((j, li) => {\n            cleanContent += `- ${$(li).text().trim()}\\n`;\n        });\n    });\n\n    return cleanContent.trim();\n}\n\n// Main workflow function to fetch and clean the content\nasync function main() {\n    const urls = $input.all().map(item => item.json.url); // Accessing the URLs from the input\n\n    const results = [];\n    for (const url of urls) {\n        try {\n            const html = await fetchPage(url);\n            const cleanContent = extractMainContent(html);\n\n            // Return the clean content\n            results.push({\n                url,\n                cleanContent,\n            });\n        } catch (error) {\n            results.push({\n                url,\n                error: error.message,\n            });\n        }\n    }\n\n    return results;\n}\n\nreturn await main();\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1560,
        220
      ],
      "id": "980c2c60-1469-4a6f-b85e-a7430d01f68f",
      "name": "Create Markdown‚úÖ"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        1800,
        80
      ],
      "id": "92cd7e37-eb3e-40bf-bec3-84da1561ee91",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "const cheerio = require('cheerio');\nconst axios = require('axios');\n\nreturn Promise.all(items.map(async (item) => {\n  const url = item.json.url;\n\n  if (!url) {\n    return { json: { error: \"No URL provided\" } };\n  }\n\n  try {\n    // Fetch the HTML content from the URL\n    const response = await axios.get(url);\n    const html = response.data;\n\n    // Load HTML into Cheerio\n    const $ = cheerio.load(html);\n\n    // Extract the title tag\n    const title = $('title').text() || \"No title found\";\n\n    // Extract the meta description\n    const metaDescription = $('meta[name=\"description\"]').attr('content') || \"No description found\";\n\n    // Extract the canonical URL\n    const canonical = $('link[rel=\"canonical\"]').attr('href') || \"No canonical URL found\";\n\n    // Extract all headings (H1, H2, H3, etc.)\n    const headings = [];\n    $('h1, h2, h3, h4, h5, h6').each((i, el) => {\n      headings.push({\n        level: el.name,\n        text: $(el).text().trim()\n      });\n    });\n\n    // Extract internal and external links with anchor texts\n    const internalLinks = [];\n    const externalLinks = [];\n    $('a').each((i, el) => {\n      const href = $(el).attr('href');\n      const anchorText = $(el).text().trim();\n\n      if (href) {\n        if (href.startsWith('/') || href.includes(url)) {\n          internalLinks.push({ href, anchorText: anchorText || \"No anchor text\" });\n        } else {\n          externalLinks.push({ href, anchorText: anchorText || \"No anchor text\" });\n        }\n      }\n    });\n\n    // Extract robots meta tag\n    const robotsMeta = $('meta[name=\"robots\"]').attr('content') || \"No robots meta found\";\n\n    // Extract Open Graph tags\n    const ogTags = {};\n    $('meta[property^=\"og:\"]').each((i, el) => {\n      const property = $(el).attr('property');\n      const content = $(el).attr('content');\n      if (property && content) {\n        ogTags[property.replace('og:', '')] = content;\n      }\n    });\n\n    // Extract structured data (JSON-LD)\n    const structuredData = [];\n    $('script[type=\"application/ld+json\"]').each((i, el) => {\n      try {\n        const json = JSON.parse($(el).html());\n        structuredData.push(json);\n      } catch (error) {\n        // Ignore invalid JSON\n      }\n    });\n\n    // Extract image details\n    const images = [];\n    $('img').each((i, el) => {\n      images.push({\n        src: $(el).attr('src') || \"No source\",\n        alt: $(el).attr('alt') || \"No alt text\",\n        width: $(el).attr('width') || \"No width\",\n        height: $(el).attr('height') || \"No height\"\n      });\n    });\n\n    // Analyze viewport meta tag\n    const viewportMeta = $('meta[name=\"viewport\"]').attr('content') || \"No viewport meta tag\";\n\n    // Calculate word count\n    const wordCount = $('body').text().split(/\\s+/).filter(word => word.length > 0).length;\n\n    // Check for missing alt attributes\n    const imagesWithoutAlt = images.filter(img => img.alt === \"No alt text\").length;\n\n    // Return the structured result\n    return {\n      json: {\n        url,\n        title,\n        metaDescription,\n        canonical,\n        headings,\n        internalLinks,\n        externalLinks,\n        robotsMeta,\n        openGraph: ogTags,\n        structuredData,\n        images,\n        imageAnalysis: {\n          totalImages: images.length,\n          imagesWithoutAlt\n        },\n        viewportMeta,\n        wordCount\n      }\n    };\n\n  } catch (error) {\n    return { json: { error: `Failed to fetch URL: ${url}`, details: error.message } };\n  }\n}));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1540,
        0
      ],
      "id": "9a5554b4-f48b-47b4-a4ba-978bb909cdf1",
      "name": "techical analyis ‚úÖ"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "response",
        "options": {}
      },
      "id": "6ad4a404-43fb-4bb9-ad22-e2ac1575c710",
      "name": "Aggregate1",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        2000,
        80
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "06373437-8288-4171-9f98-e8a417220dd4",
              "name": "request_type",
              "type": "string",
              "value": "={{ $json.query.property }}"
            },
            {
              "id": "da45c0c5-05f6-4107-81aa-8c08c972d9bf",
              "name": "start_date",
              "type": "string",
              "value": "={{ $json.query.startDate }}"
            },
            {
              "id": "59d55034-c612-43d7-9700-4cacdb630ec2",
              "name": "end_date",
              "type": "string",
              "value": "={{ $json.query.endDate }}"
            },
            {
              "id": "4c2478c0-7f96-4d3d-a632-089307dc989e",
              "name": "dimensions",
              "type": "string",
              "value": "={{ $json.query.dimensions }}"
            },
            {
              "id": "eceefbf9-44e5-4617-96ea-58aca2a29618",
              "name": "rowLimit",
              "type": "number",
              "value": "={{ $json.query.rowLimit }}"
            },
            {
              "id": "4e18386e-8548-4385-b620-43efbb11cd63",
              "name": "startRow",
              "type": "number",
              "value": "=0"
            },
            {
              "id": "a9323a7b-08b4-4015-b3d7-632bcdf56f4e",
              "name": "property",
              "type": "string",
              "value": "={{ $json.query.property.urlEncode() }}"
            }
          ]
        },
        "options": {}
      },
      "id": "80445445-6ab6-4239-ad4e-4eccb562a525",
      "name": "Set fields - Consruct API CALL",
      "type": "n8n-nodes-base.set",
      "position": [
        1340,
        660
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2cffd36f-72bd-4535-8427-a88028ea0c4c",
              "name": "searchConsoleData",
              "type": "array",
              "value": "={{ $json.rows }}"
            }
          ]
        },
        "options": {}
      },
      "id": "e7da0490-ba06-4c42-9101-6848f3780b58",
      "name": "Set fields - Create searchConsoleDataArray",
      "type": "n8n-nodes-base.set",
      "position": [
        1740,
        660
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://www.googleapis.com/webmasters/v3/sites/{{ $json.property }}/searchAnalytics/query",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleOAuth2Api",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {}
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"startDate\": \"{{ $json.start_date }}\",\n  \"endDate\": \"{{ $json.end_date }}\",\n  \"dimensions\": {{ $json.dimensions }},\n  \"rowLimit\": {{ $json.rowLimit }},\n  \"startRow\": 0,\n  \"dataState\":\"all\"\n}",
        "options": {}
      },
      "id": "d381dd21-4fd0-488d-a725-e593ffa6d89e",
      "name": "Search Console - Get Custom Insights",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1540,
        660
      ],
      "typeVersion": 4.2,
      "credentials": {
        "googleOAuth2Api": {
          "id": "wuKNLprxCMuetOYN",
          "name": "Google account‚úÖ3"
        }
      }
    },
    {
      "parameters": {
        "content": "## Search Console - Get Custom Insights\n\nThis node **performs the API call to retrieve data from Search Console**.\n",
        "height": 324,
        "width": 950,
        "color": 4
      },
      "id": "3ba1fa5b-ebfa-4be5-9e93-95af3278a18e",
      "name": "Sticky Note9",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1260,
        520
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "response",
        "options": {}
      },
      "id": "4ee7fdc7-37d3-4894-8e23-8c251c7ca374",
      "name": "Array aggregation - response to AI Agent",
      "type": "n8n-nodes-base.aggregate",
      "position": [
        1960,
        660
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## On Page SEO Analysis",
        "height": 440,
        "width": 1000,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1220,
        -40
      ],
      "typeVersion": 1,
      "id": "ac53a4c7-50ce-46b6-a643-59f715d252d8",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "content": "## Search Console Reports",
        "height": 400,
        "width": 1000
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1220,
        460
      ],
      "typeVersion": 1,
      "id": "8f95c334-3cd1-4ed7-851a-e8685da291ac",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Create and send as an email report from the last 30 days google analytics and serch console report. Be as detailed and informative as posible\nYou have access to a few tools\n\nWe are to get the data based on the last 30 days by default if not specified. We can use both of these tools to run search.\n\nFor the search console, stick to this format {\"property\": \"https://www.mailsafi.com/\", \"request_type\": \"custom_insights\", \"startDate\": \"2024-11-07\", \"endDate\": \"2024-12-07\", \"dimensions\": [\"page\"], \"rowLimit\": 1000}\twhere you send the date range, the dimention, etc. You are helping with SEO reporting with the actual values\n\nThe time and date now is {{ $now.format( \" DDD t z\") }}\n\nFor the on-page analysis tool. Just send the url that we need to analyze. This will be useful when we need to see why one page performed better than the other and offer recommendations on what to do\n\n\nInclude all the relevant metrics in your report\n\nI need it to be a bit thorough though in this. \n\nWe have a tool to do an on-page analysis. Use this to determine why a page performed as it did\nFrom the report,. we can get more data, like which pages did what. When doing the report, why not send these urls to the tool and analyse the pages? After all its an SEO report that we are creating\n- Why not use this focusing on the home page only? \n- The onpage tool has the needed data; why not use that to give recommendations rather than give general recommendations?\n\nThis is both an analytics and SEO report combining the analytics, search console and on-page/technical analysis to provide detailed reports\n\nDont be shy with the details\n\n{{ $json.chatInput || $json.prompt}}",
        "options": {
          "systemMessage": "You are a helpful assistant\n\n<html>\n<head>\n    <style>\n        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n        h1, h2, h3 { color: #0073e6; margin-bottom: 10px; }\n        .container { width: 80%; margin: auto; padding: 20px; }\n        .header { background: #f4f4f4; padding: 10px 0; text-align: center; }\n        .footer { text-align: center; margin-top: 20px; font-size: 0.9em; color: #777; }\n        table { width: 100%; border-collapse: collapse; margin: 20px 0; }\n        th, td { padding: 10px; border: 1px solid #ddd; text-align: left; }\n        th { background-color: #0073e6; color: #fff; }\n        td { background-color: #f9f9f9; }\n        .highlight { font-weight: bold; color: #d9534f; }\n        .cta-button { background-color: #0073e6; color: white; padding: 10px 20px; border: none; border-radius: 5px; text-decoration: none; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>Google Analytics Insights & Performance Report</h1>\n        </div>\n\n        <h2>Executive Summary</h2>\n        <p><span class=\"highlight\">Overall Performance:</span> We saw strong performance from direct traffic with high user engagement. Organic sources have potential for growth.</p>\n\n        <h2>Traffic & Source Analysis</h2>\n        <table>\n            <tr>\n                <th>Traffic Source</th>\n                <th>Total Users</th>\n                <th>Engagement (Pages Viewed)</th>\n            </tr>\n            <tr>\n                <td>Direct</td>\n                <td>90</td>\n                <td>7</td>\n            </tr>\n            <tr>\n                <td>Organic</td>\n                <td>31</td>\n                <td>7</td>\n            </tr>\n            <tr>\n                <td>Referral</td>\n                <td>4</td>\n                <td>3</td>\n            </tr>\n            <tr>\n                <td>Paid</td>\n                <td>50</td>\n                <td>5</td>\n            </tr>\n        </table>\n\n        <h2>Key Recommendations</h2>\n        <ul>\n            <li>Improve SEO on high-traffic but underperforming pages.</li>\n            <li>Focus on improving conversion rates from organic traffic sources.</li>\n            <li>Optimize referral traffic by improving content alignment with user needs.</li>\n        </ul>\n\n        <h2>Opportunities for Growth</h2>\n        <ul>\n            <li>Target high-performing segments with personalized content to increase engagement.</li>\n            <li>Focus on organic traffic growth by optimizing landing pages and enhancing content relevance.</li>\n        </ul>\n\n        <div class=\"cta\">\n            <p><a href=\"#\" class=\"cta-button\">Schedule a Discussion</a></p>\n        </div>\n\n        <div class=\"footer\">\n            <p>Thank you for reviewing the insights. For further details, feel free to reach out!</p>\n        </div>\n    </div>\n</body>\n</html>\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        60,
        -160
      ],
      "id": "9daf1c4d-a9ee-4400-bbdd-d3a3a7680e39",
      "name": "Get and prepare report",
      "retryOnFail": true
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1",
    "errorWorkflow": "UFY8E1UxgEppEMpW"
  },
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "tags": [
    {
      "createdAt": "2024-12-03T14:40:24.017Z",
      "updatedAt": "2024-12-03T14:40:24.017Z",
      "id": "ufRhFqhr9vLO0YC1",
      "name": "AI"
    },
    {
      "createdAt": "2024-12-04T12:32:00.284Z",
      "updatedAt": "2024-12-04T12:32:00.284Z",
      "id": "bNah9fcKNwQQBzJ1",
      "name": "SEO DOCTOR"
    },
    {
      "createdAt": "2024-12-07T05:13:55.254Z",
      "updatedAt": "2024-12-07T05:13:55.254Z",
      "id": "L5zcJfTllY0jsuUO",
      "name": "SEO REPORTS"
    },
    {
      "createdAt": "2024-12-03T14:36:18.275Z",
      "updatedAt": "2024-12-03T14:36:18.275Z",
      "id": "koKAFcp5uch8EPTB",
      "name": "Public"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-12-13T06:09:48.010Z",
  "versionId": "0078d578-1797-485e-bbd9-a8232c43b357"
}