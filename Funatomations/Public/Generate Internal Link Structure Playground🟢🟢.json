{
  "active": true,
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "method1",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Optimized scraper✅✅",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML": {
      "main": [
        []
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Connect your storage tool",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "method1": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Optimized scraper✅✅": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-01-19T06:18:49.862Z",
  "id": "DwJrXPniDYjYEDgk",
  "meta": null,
  "name": "Generate Internal Link Structure Playground🟢🟢",
  "nodes": [
    {
      "parameters": {
        "multipleMethods": true,
        "httpMethod": [
          "POST"
        ],
        "path": "6faef80a-ae16-4655-aff7-2ef1e07065eb",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -380,
        -200
      ],
      "id": "dfe87b18-4bf0-4f6e-8db2-c7ae5d28db31",
      "name": "Webhook",
      "webhookId": "6faef80a-ae16-4655-aff7-2ef1e07065eb"
    },
    {
      "parameters": {
        "content": "## Usage\n\nRun this on a self hosted n8n instance\n\nCall this webhook endpoint with a `query` as `url` eg \n\n`https://dev.funautomations.io/webhook/4a85c711-d?url=funautomations.io`\n\n- You might need to install each of these axios\ncheerio\n\n- Enable external modules on your n8n by adding these settings to your ENV before you can run this workflow\n\n`NODE_FUNCTION_ALLOW_BUILTIN=*\n NODE_FUNCTION_ALLOW_EXTERNAL=*`\n\nRead More on  https://funautomation.notion.site/Generate-Sitemap-15dd3b4768e2802195aae81ea3f279a4?pvs=4\n",
        "height": 520,
        "width": 400
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1000,
        -240
      ],
      "typeVersion": 1,
      "id": "7b9a6bdf-8a89-41b3-abec-0ea842277ae6",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "jsCode": "const axios = require('axios');\nconst { Parser } = require('htmlparser2');\nconst { URL } = require('url');\nconst { Transform } = require('stream');\n\nclass PageAnalysis {\n  constructor(url) {\n    this.url = url;\n    this.internalLinks = new Map(); // Map<url, {anchorText: string, context: string}>\n    this.externalLinks = new Map();\n    this.incomingLinks = new Set();\n  }\n}\n\nasync function streamParsePage(url, domain) {\n  const pageAnalysis = new PageAnalysis(url);\n  \n  try {\n    const response = await axios.get(url, {\n      timeout: 5000,\n      responseType: 'stream',\n      headers: {\n        'User-Agent': 'Mozilla/5.0 (compatible; CustomBot/1.0)',\n      }\n    });\n\n    return new Promise((resolve, reject) => {\n      let currentTag = null;\n      let currentHref = null;\n      let currentText = '';\n      let isCollectingText = false;\n      \n      const parser = new Parser({\n        onopentag(name, attributes) {\n          if (name === 'a' && attributes.href) {\n            currentTag = 'a';\n            currentHref = attributes.href;\n            currentText = '';\n            isCollectingText = true;\n          }\n        },\n        \n        ontext(text) {\n          if (isCollectingText) {\n            currentText += text.trim() + ' ';\n          }\n        },\n        \n        onclosetag(tagname) {\n          if (tagname === 'a' && currentHref) {\n            try {\n              let href = currentHref;\n              \n              if (href.startsWith('/')) {\n                href = new URL(href, domain).href;\n              }\n              \n              href = new URL(href).href;\n              \n              const linkData = {\n                anchorText: currentText.trim(),\n                originalHref: currentHref\n              };\n              \n              if (href.startsWith(domain)) {\n                pageAnalysis.internalLinks.set(href, linkData);\n              } else {\n                pageAnalysis.externalLinks.set(href, linkData);\n              }\n            } catch (e) {\n              // Skip invalid URLs\n            }\n            \n            currentTag = null;\n            currentHref = null;\n            currentText = '';\n            isCollectingText = false;\n          }\n        },\n        \n        onerror: reject,\n        onend: () => resolve(pageAnalysis)\n      });\n\n      const transformStream = new Transform({\n        transform(chunk, encoding, callback) {\n          parser.write(chunk);\n          callback();\n        }\n      });\n\n      response.data\n        .pipe(transformStream)\n        .on('finish', () => parser.end())\n        .on('error', reject);\n    });\n  } catch (error) {\n    console.error(`Error analyzing ${url}: ${error.message}`);\n    return null;\n  }\n}\n\n\n\nasync function processBatchWithPrefetch(urls, domain, pageAnalyses, prefetchSize = 10) {\n  const nextBatchUrls = Array.from(urls).slice(prefetchSize, prefetchSize * 2);\n  const prefetchPromises = nextBatchUrls.map(url => \n    axios.get(url, {\n      timeout: 5000,\n      responseType: 'stream',\n      headers: {\n        'User-Agent': 'Mozilla/5.0 (compatible; CustomBot/1.0)',\n      }\n    }).catch(() => null)\n  );\n\n  const currentBatchPromises = urls.slice(0, prefetchSize).map(url => \n    streamParsePage(url, domain)\n  );\n\n  const results = await Promise.allSettled(currentBatchPromises);\n  \n  results.forEach((result, index) => {\n    if (result.status === 'fulfilled' && result.value) {\n      pageAnalyses.set(urls[index], result.value);\n    }\n  });\n\n  Promise.allSettled(prefetchPromises);\n  \n  return urls.filter((url, index) => \n    results[index]?.status === 'fulfilled' && results[index]?.value\n  );\n}\n\nasync function analyzeDomain(domain, batchSize = 10) {\n  const visited = new Set();\n  const toVisit = new Set([domain]);\n  const pageAnalyses = new Map();\n  const urlQueue = [[domain, 0]];\n  const maxDepth = 5;\n  \n  while (urlQueue.length > 0) {\n    const currentBatch = [];\n    while (currentBatch.length < batchSize && urlQueue.length > 0) {\n      const [url, depth] = urlQueue.shift();\n      if (depth <= maxDepth) {\n        currentBatch.push(url);\n        toVisit.delete(url);\n      }\n    }\n    \n    if (currentBatch.length === 0) break;\n    \n    const successfulUrls = await processBatchWithPrefetch(currentBatch, domain, pageAnalyses);\n    \n    successfulUrls.forEach(url => {\n      visited.add(url);\n      \n      const analysis = pageAnalyses.get(url);\n      if (!analysis) return;\n      \n      const currentDepth = urlQueue.find(([u]) => u === url)?.[1] || 0;\n      \n      analysis.internalLinks.forEach((_, href) => {\n        if (!visited.has(href) && !toVisit.has(href)) {\n          urlQueue.push([href, currentDepth + 1]);\n          toVisit.add(href);\n        }\n        \n        if (!pageAnalyses.has(href)) {\n          pageAnalyses.set(href, new PageAnalysis(href));\n        }\n        pageAnalyses.get(href).incomingLinks.add(url);\n      });\n    });\n  }\n  \n  return pageAnalyses;\n}\n\nfunction generateAnalysisReport(pageAnalyses) {\n  const report = [];\n  \n  for (const [url, analysis] of pageAnalyses) {\n    report.push({\n      url,\n      internalLinks: Array.from(analysis.internalLinks, ([url, data]) => ({\n        url,\n        anchorText: data.anchorText,\n        originalHref: data.originalHref\n      })),\n      externalLinks: Array.from(analysis.externalLinks, ([url, data]) => ({\n        url,\n        anchorText: data.anchorText,\n        originalHref: data.originalHref\n      })),\n      incomingLinks: Array.from(analysis.incomingLinks).map(incomingUrl => {\n        const incomingPage = pageAnalyses.get(incomingUrl);\n        const linkData = incomingPage?.internalLinks.get(url);\n        return {\n          url: incomingUrl,\n          anchorText: linkData?.anchorText || '',\n          originalHref: linkData?.originalHref || ''\n        };\n      })\n    });\n  }\n\n  return report;\n}\n\n\nfunction generateChartData(pageAnalyses) {\n  const nodes = [];\n  const links = [];\n  const nodeMap = new Map();\n\n  let nodeId = 0;\n  for (const url of pageAnalyses.keys()) {\n    nodes.push({\n      id: nodeId,\n      label: new URL(url).pathname || '/',\n      url: url\n    });\n    nodeMap.set(url, nodeId);\n    nodeId++;\n  }\n\n  for (const [url, analysis] of pageAnalyses) {\n    const sourceId = nodeMap.get(url);\n    \n    for (const targetUrl of analysis.internalLinks.keys()) {\n      const targetId = nodeMap.get(targetUrl);\n      if (targetId !== undefined) {\n        links.push({\n          source: sourceId,\n          target: targetId\n        });\n      }\n    }\n  }\n\n  return { nodes, links };\n}\n\nfunction generateSitemap(urls) {\n  return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n    ${urls.map(url => `\n      <url>\n        <loc>${url}</loc>\n        <lastmod>${new Date().toISOString()}</lastmod>\n        <priority>0.5</priority>\n      </url>\n    `).join('')}\n  </urlset>`;\n}\n\n\nfunction generateVisualizationHtml(analysisData) {\n  const { nodes, links } = analysisData.chartData;\n  \n  return `\n<!DOCTYPE html>\n<html>\n<head>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/7.8.5/d3.min.js\"></script>\n  <style>\n    body { margin: 0; background: #fafafa; }\n    #chart { width: 100vw; height: 100vh; }\n    .node { \n      stroke: #fff; \n      stroke-width: 2px;\n      cursor: pointer;\n      transition: opacity 0.3s ease;\n    }\n    .node.dimmed {\n      opacity: 0.2;\n    }\n    .link { \n      stroke: #999; \n      stroke-opacity: 0.6; \n      stroke-width: 1px;\n      transition: all 0.3s ease;\n    }\n    .link.highlighted {\n      stroke: #ff7700;\n      stroke-width: 3px;\n      stroke-opacity: 1;\n    }\n    .link.dimmed {\n      opacity: 0.1;\n    }\n    .node-label { \n      font-family: Arial, sans-serif;\n      font-size: 12px;\n      pointer-events: none;\n      transition: opacity 0.3s ease;\n    }\n    .node-label.dimmed {\n      opacity: 0.2;\n    }\n    .tooltip {\n      position: absolute;\n      padding: 12px;\n      background: rgba(0, 0, 0, 0.8);\n      color: white;\n      border-radius: 4px;\n      font-size: 12px;\n      pointer-events: none;\n      max-width: 200px;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.2);\n    }\n    .stats {\n      font-size: 11px;\n      margin-top: 5px;\n      color: #ccc;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"chart\"></div>\n  <script>\n    const data = ${JSON.stringify({ nodes, links })};\n    \n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    \n    // Pre-calculate positions in a grid-like pattern\n    const gridSize = Math.ceil(Math.sqrt(data.nodes.length));\n    const cellWidth = width / (gridSize + 1);\n    const cellHeight = height / (gridSize + 1);\n    \n    data.nodes.forEach((node, i) => {\n      const row = Math.floor(i / gridSize);\n      const col = i % gridSize;\n      // Add some randomness to grid positions\n      node.x = cellWidth * (col + 1) + (Math.random() - 0.5) * cellWidth * 0.5;\n      node.y = cellHeight * (row + 1) + (Math.random() - 0.5) * cellHeight * 0.5;\n    });\n    \n    // Calculate incoming and outgoing links\n    data.nodes.forEach(node => {\n      node.outgoingLinks = data.links.filter(link => link.source === node.id || link.source.id === node.id).length;\n      node.incomingLinks = data.links.filter(link => link.target === node.id || link.target.id === node.id).length;\n    });\n    \n    const simulation = d3.forceSimulation(data.nodes)\n      .alphaDecay(0.1)\n      .velocityDecay(0.6)\n      .force(\"link\", d3.forceLink(data.links)\n        .id(d => d.id)\n        .distance(80)\n        .strength(0.5))\n      .force(\"charge\", d3.forceManyBody()\n        .strength(-200)\n        .distanceMax(200))\n      .force(\"center\", d3.forceCenter(width / 2, height / 2))\n      .force(\"collision\", d3.forceCollide().radius(40).strength(0.9))\n      .force(\"x\", d3.forceX(width / 2).strength(0.1))\n      .force(\"y\", d3.forceY(height / 2).strength(0.1));\n\n    const svg = d3.select(\"#chart\")\n      .append(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n\n    const g = svg.append(\"g\");\n    svg.call(d3.zoom()\n      .scaleExtent([0.1, 4])\n      .on(\"zoom\", (event) => {\n        g.attr(\"transform\", event.transform);\n      }));\n\n    const tooltip = d3.select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"opacity\", 0);\n\n    const link = g.append(\"g\")\n      .selectAll(\"line\")\n      .data(data.links)\n      .join(\"line\")\n      .attr(\"class\", \"link\");\n\n    const node = g.append(\"g\")\n      .selectAll(\"circle\")\n      .data(data.nodes)\n      .join(\"circle\")\n      .attr(\"class\", \"node\")\n      .attr(\"r\", d => Math.max(6, Math.min(12, 6 + Math.sqrt(d.incomingLinks + d.outgoingLinks))))\n      .attr(\"fill\", d => d3.schemeCategory10[d.id % 10])\n      .on(\"click\", highlightChain)\n      .on(\"mouseover\", showTooltip)\n      .on(\"mouseout\", hideTooltip)\n      .call(drag(simulation));\n\n    const label = g.append(\"g\")\n      .selectAll(\"text\")\n      .data(data.nodes)\n      .join(\"text\")\n      .attr(\"class\", \"node-label\")\n      .text(d => d.label)\n      .attr(\"x\", 12)\n      .attr(\"y\", 3);\n\n    function showTooltip(event, d) {\n      tooltip.transition()\n        .duration(200)\n        .style(\"opacity\", .9);\n      tooltip.html(\n        \\`<strong>\\${d.url}</strong>\n         <div class=\"stats\">\n           Incoming links: \\${d.incomingLinks}<br>\n           Outgoing links: \\${d.outgoingLinks}\n         </div>\\`\n      )\n        .style(\"left\", (event.pageX + 10) + \"px\")\n        .style(\"top\", (event.pageY - 10) + \"px\");\n    }\n\n    function hideTooltip() {\n      tooltip.transition()\n        .duration(500)\n        .style(\"opacity\", 0);\n    }\n\n    function highlightChain(event, d) {\n      // Find connected nodes and links\n      const connectedLinks = data.links.filter(l => \n        l.source.id === d.id || l.source === d.id || \n        l.target.id === d.id || l.target === d.id\n      );\n      \n      const connectedNodes = new Set();\n      connectedLinks.forEach(l => {\n        connectedNodes.add(l.source.id || l.source);\n        connectedNodes.add(l.target.id || l.target);\n      });\n\n      // Update visual states\n      link\n        .classed(\"highlighted\", l => connectedLinks.includes(l))\n        .classed(\"dimmed\", l => !connectedLinks.includes(l));\n      \n      node\n        .classed(\"dimmed\", n => !connectedNodes.has(n.id));\n      \n      label\n        .classed(\"dimmed\", n => !connectedNodes.has(n.id));\n    }\n\n    // Reset highlight when clicking on background\n    svg.on(\"click\", (event) => {\n      if (event.target.tagName === \"svg\") {\n        link\n          .classed(\"highlighted\", false)\n          .classed(\"dimmed\", false);\n        node\n          .classed(\"dimmed\", false);\n        label\n          .classed(\"dimmed\", false);\n      }\n    });\n\n    function drag(simulation) {\n      function dragstarted(event) {\n        if (!event.active) simulation.alphaTarget(0.1).restart();\n        event.subject.fx = event.subject.x;\n        event.subject.fy = event.subject.y;\n      }\n      \n      function dragged(event) {\n        event.subject.fx = event.x;\n        event.subject.fy = event.y;\n      }\n      \n      function dragended(event) {\n        if (!event.active) simulation.alphaTarget(0);\n        event.subject.fx = event.x;\n        event.subject.fy = event.y;\n      }\n      \n      return d3.drag()\n        .on(\"start\", dragstarted)\n        .on(\"drag\", dragged)\n        .on(\"end\", dragended);\n    }\n\n    // Initial positions based on grid\n    simulation.nodes(data.nodes).tick(100);\n\n    simulation.on(\"tick\", () => {\n      link\n        .attr(\"x1\", d => d.source.x)\n        .attr(\"y1\", d => d.source.y)\n        .attr(\"x2\", d => d.target.x)\n        .attr(\"y2\", d => d.target.y);\n\n      node\n        .attr(\"cx\", d => d.x)\n        .attr(\"cy\", d => d.y);\n\n      label\n        .attr(\"x\", d => d.x + 12)\n        .attr(\"y\", d => d.y + 3);\n    });\n  </script>\n</body>\n</html>`;\n}\n\nasync function main(domain) {\n  try {\n    console.time('Crawl Duration');\n    const pageAnalyses = await analyzeDomain(domain);\n    console.timeEnd('Crawl Duration');\n    \n    const report = generateAnalysisReport(pageAnalyses);\n    const chartData = generateChartData(pageAnalyses);\n    const visualization = generateVisualizationHtml({ chartData });\n\n    return {\n      sitemap: generateSitemap(Array.from(pageAnalyses.keys())),\n      report,\n      visualization\n    };\n  } catch (error) {\n    console.error('Error in main:', error);\n    throw error;\n  }\n}\n\n// n8n integration\nconst domain = $json[\"domain\"];\nreturn main(domain)\n  .then(result => {\n    return [result];\n  })\n  .catch(error => {\n    console.error('Error:', error.message);\n    return [{ error: error.message }];\n  });"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -380,
        -860
      ],
      "id": "3c4c420c-68ac-454a-a07b-d9dc22eb4b04",
      "name": "Optimized scraper✅✅1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8b296bcc-a83b-4a9d-90df-e8960c70f6d3",
              "name": "domain",
              "value": "={{ \"https://\" + ($json.domain || $json.body.domains[0])   }}",
              "type": "string"
            },
            {
              "id": "7c7bcc89-4c97-434f-8f03-c8f6ea8d5f9f",
              "name": "Method",
              "value": "={{ $json.Method }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        40,
        -200
      ],
      "id": "5a4c1df7-da7f-450c-bcd7-658e36f5f6e1",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "html": "{{ $json.visualization }}"
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        740,
        -880
      ],
      "id": "ac773893-2f1b-495e-876e-24f819ec0e5d",
      "name": "HTML"
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        460,
        -360
      ],
      "id": "c39a5c63-4f9f-4eaf-b6bc-0459e1e80ead",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "aa5bf0e8-3cb5-4ef7-b3b5-919b7fbe3fa9",
              "name": "report",
              "value": "={{ $json.report }}",
              "type": "array"
            },
            {
              "id": "68952c97-83ae-40cc-8409-dcdffe6f7f9d",
              "name": "sitemap",
              "value": "={{ $json.sitemap }}",
              "type": "string"
            },
            {
              "id": "a780f899-27eb-4b0c-afe4-bc094e702b40",
              "name": "visualization",
              "value": "={{ $json.visualization }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        460,
        -80
      ],
      "id": "6edcea1b-4583-4474-9387-2c085d6cbf68",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "cd7bb9e3-a260-4352-be61-1726450b097f",
              "name": "Method",
              "value": "GET",
              "type": "string"
            },
            {
              "id": "2bfa3595-c60f-464e-9c3b-663d350462c9",
              "name": "domain",
              "value": "={{ \n  $json.query.url.startsWith('https://') \n    ? $json.query.url \n    : `https://${$json.query.url}`\n}}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -140,
        -200
      ],
      "id": "5b4f3659-1028-473f-936c-d4e26eb764f9",
      "name": "method1"
    },
    {
      "parameters": {
        "jsCode": "const axios = require('axios');\nconst { Parser } = require('htmlparser2');\nconst { URL } = require('url');\nconst { Transform } = require('stream');\n\nclass PageAnalysis {\n  constructor(url) {\n    this.url = url;\n    this.internalLinks = new Map(); // Map<url, {anchorText: string, context: string}>\n    this.externalLinks = new Map();\n    this.incomingLinks = new Set();\n  }\n}\n\nasync function streamParsePage(url, domain) {\n  const pageAnalysis = new PageAnalysis(url);\n  \n  try {\n    const response = await axios.get(url, {\n      timeout: 5000,\n      responseType: 'stream',\n      headers: {\n        'User-Agent': 'Mozilla/5.0 (compatible; CustomBot/1.0)',\n      }\n    });\n\n    return new Promise((resolve, reject) => {\n      let currentTag = null;\n      let currentHref = null;\n      let currentText = '';\n      let isCollectingText = false;\n      \n      const parser = new Parser({\n        onopentag(name, attributes) {\n          if (name === 'a' && attributes.href) {\n            currentTag = 'a';\n            currentHref = attributes.href;\n            currentText = '';\n            isCollectingText = true;\n          }\n        },\n        \n        ontext(text) {\n          if (isCollectingText) {\n            currentText += text.trim() + ' ';\n          }\n        },\n        \n        onclosetag(tagname) {\n          if (tagname === 'a' && currentHref) {\n            try {\n              let href = currentHref;\n              \n              if (href.startsWith('/')) {\n                href = new URL(href, domain).href;\n              }\n              \n              href = new URL(href).href;\n              \n              const linkData = {\n                anchorText: currentText.trim(),\n                originalHref: currentHref\n              };\n              \n              if (href.startsWith(domain)) {\n                pageAnalysis.internalLinks.set(href, linkData);\n              } else {\n                pageAnalysis.externalLinks.set(href, linkData);\n              }\n            } catch (e) {\n              // Skip invalid URLs\n            }\n            \n            currentTag = null;\n            currentHref = null;\n            currentText = '';\n            isCollectingText = false;\n          }\n        },\n        \n        onerror: reject,\n        onend: () => resolve(pageAnalysis)\n      });\n\n      const transformStream = new Transform({\n        transform(chunk, encoding, callback) {\n          parser.write(chunk);\n          callback();\n        }\n      });\n\n      response.data\n        .pipe(transformStream)\n        .on('finish', () => parser.end())\n        .on('error', reject);\n    });\n  } catch (error) {\n    console.error(`Error analyzing ${url}: ${error.message}`);\n    return null;\n  }\n}\n\n\n\nasync function processBatchWithPrefetch(urls, domain, pageAnalyses, prefetchSize = 10) {\n  const nextBatchUrls = Array.from(urls).slice(prefetchSize, prefetchSize * 2);\n  const prefetchPromises = nextBatchUrls.map(url => \n    axios.get(url, {\n      timeout: 5000,\n      responseType: 'stream',\n      headers: {\n        'User-Agent': 'Mozilla/5.0 (compatible; CustomBot/1.0)',\n      }\n    }).catch(() => null)\n  );\n\n  const currentBatchPromises = urls.slice(0, prefetchSize).map(url => \n    streamParsePage(url, domain)\n  );\n\n  const results = await Promise.allSettled(currentBatchPromises);\n  \n  results.forEach((result, index) => {\n    if (result.status === 'fulfilled' && result.value) {\n      pageAnalyses.set(urls[index], result.value);\n    }\n  });\n\n  Promise.allSettled(prefetchPromises);\n  \n  return urls.filter((url, index) => \n    results[index]?.status === 'fulfilled' && results[index]?.value\n  );\n}\n\nasync function analyzeDomain(domain, batchSize = 10) {\n  const visited = new Set();\n  const toVisit = new Set([domain]);\n  const pageAnalyses = new Map();\n  const urlQueue = [[domain, 0]];\n  const maxDepth = 5;\n  \n  while (urlQueue.length > 0) {\n    const currentBatch = [];\n    while (currentBatch.length < batchSize && urlQueue.length > 0) {\n      const [url, depth] = urlQueue.shift();\n      if (depth <= maxDepth) {\n        currentBatch.push(url);\n        toVisit.delete(url);\n      }\n    }\n    \n    if (currentBatch.length === 0) break;\n    \n    const successfulUrls = await processBatchWithPrefetch(currentBatch, domain, pageAnalyses);\n    \n    successfulUrls.forEach(url => {\n      visited.add(url);\n      \n      const analysis = pageAnalyses.get(url);\n      if (!analysis) return;\n      \n      const currentDepth = urlQueue.find(([u]) => u === url)?.[1] || 0;\n      \n      analysis.internalLinks.forEach((_, href) => {\n        if (!visited.has(href) && !toVisit.has(href)) {\n          urlQueue.push([href, currentDepth + 1]);\n          toVisit.add(href);\n        }\n        \n        if (!pageAnalyses.has(href)) {\n          pageAnalyses.set(href, new PageAnalysis(href));\n        }\n        pageAnalyses.get(href).incomingLinks.add(url);\n      });\n    });\n  }\n  \n  return pageAnalyses;\n}\n\nfunction generateAnalysisReport(pageAnalyses) {\n  const report = [];\n  \n  for (const [url, analysis] of pageAnalyses) {\n    report.push({\n      url,\n      internalLinks: Array.from(analysis.internalLinks, ([url, data]) => ({\n        url,\n        anchorText: data.anchorText,\n        originalHref: data.originalHref\n      })),\n      externalLinks: Array.from(analysis.externalLinks, ([url, data]) => ({\n        url,\n        anchorText: data.anchorText,\n        originalHref: data.originalHref\n      })),\n      incomingLinks: Array.from(analysis.incomingLinks).map(incomingUrl => {\n        const incomingPage = pageAnalyses.get(incomingUrl);\n        const linkData = incomingPage?.internalLinks.get(url);\n        return {\n          url: incomingUrl,\n          anchorText: linkData?.anchorText || '',\n          originalHref: linkData?.originalHref || ''\n        };\n      })\n    });\n  }\n\n  return report;\n}\n\n\nfunction generateChartData(pageAnalyses) {\n  const nodes = [];\n  const links = [];\n  const nodeMap = new Map();\n\n  let nodeId = 0;\n  for (const url of pageAnalyses.keys()) {\n    nodes.push({\n      id: nodeId,\n      label: new URL(url).pathname || '/',\n      url: url\n    });\n    nodeMap.set(url, nodeId);\n    nodeId++;\n  }\n\n  for (const [url, analysis] of pageAnalyses) {\n    const sourceId = nodeMap.get(url);\n    \n    for (const targetUrl of analysis.internalLinks.keys()) {\n      const targetId = nodeMap.get(targetUrl);\n      if (targetId !== undefined) {\n        links.push({\n          source: sourceId,\n          target: targetId\n        });\n      }\n    }\n  }\n\n  return { nodes, links };\n}\n\nfunction generateSitemap(urls) {\n  return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n    ${urls.map(url => `\n      <url>\n        <loc>${url}</loc>\n        <lastmod>${new Date().toISOString()}</lastmod>\n        <priority>0.5</priority>\n      </url>\n    `).join('')}\n  </urlset>`;\n}\n\n\nfunction generateVisualizationHtml(analysisData) {\n  const { nodes, links } = analysisData.chartData;\n  \n  return `\n<!DOCTYPE html>\n<html>\n<head>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/7.8.5/d3.min.js\"></script>\n  <style>\n    body { margin: 0; background: #fafafa; }\n    #chart { width: 100vw; height: 100vh; }\n    .node { \n      stroke: #fff; \n      stroke-width: 2px;\n      cursor: pointer;\n      transition: opacity 0.3s ease;\n    }\n    .node.dimmed {\n      opacity: 0.2;\n    }\n    .link { \n      stroke: #999; \n      stroke-opacity: 0.6; \n      stroke-width: 1px;\n      transition: all 0.3s ease;\n    }\n    .link.highlighted {\n      stroke: #ff7700;\n      stroke-width: 3px;\n      stroke-opacity: 1;\n    }\n    .link.dimmed {\n      opacity: 0.1;\n    }\n    .node-label { \n      font-family: Arial, sans-serif;\n      font-size: 12px;\n      pointer-events: none;\n      transition: opacity 0.3s ease;\n    }\n    .node-label.dimmed {\n      opacity: 0.2;\n    }\n    .tooltip {\n      position: absolute;\n      padding: 12px;\n      background: rgba(0, 0, 0, 0.0);\n      color: white;\n      border-radius: 4px;\n      font-size: 12px;\n      pointer-events: none;\n      max-width: 200px;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.2);\n    }\n    .stats {\n      font-size: 11px;\n      margin-top: 5px;\n      color: #ccc;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"chart\"></div>\n  <script>\n    const data = ${JSON.stringify({ nodes, links })};\n    \n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    \n    // Pre-calculate positions in a grid-like pattern\n    const gridSize = Math.ceil(Math.sqrt(data.nodes.length));\n    const cellWidth = width / (gridSize + 1);\n    const cellHeight = height / (gridSize + 1);\n    \n    data.nodes.forEach((node, i) => {\n      const row = Math.floor(i / gridSize);\n      const col = i % gridSize;\n      // Add some randomness to grid positions\n      node.x = cellWidth * (col + 1) + (Math.random() - 0.5) * cellWidth * 0.5;\n      node.y = cellHeight * (row + 1) + (Math.random() - 0.5) * cellHeight * 0.5;\n    });\n    \n    // Calculate incoming and outgoing links\n    data.nodes.forEach(node => {\n      node.outgoingLinks = data.links.filter(link => link.source === node.id || link.source.id === node.id).length;\n      node.incomingLinks = data.links.filter(link => link.target === node.id || link.target.id === node.id).length;\n    });\n    \n    const simulation = d3.forceSimulation(data.nodes)\n      .alphaDecay(0.1)\n      .velocityDecay(0.6)\n      .force(\"link\", d3.forceLink(data.links)\n        .id(d => d.id)\n        .distance(80)\n        .strength(0.5))\n      .force(\"charge\", d3.forceManyBody()\n        .strength(-200)\n        .distanceMax(200))\n      .force(\"center\", d3.forceCenter(width / 2, height / 2))\n      .force(\"collision\", d3.forceCollide().radius(40).strength(0.9))\n      .force(\"x\", d3.forceX(width / 2).strength(0.1))\n      .force(\"y\", d3.forceY(height / 2).strength(0.1));\n\n    const svg = d3.select(\"#chart\")\n      .append(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n\n    const g = svg.append(\"g\");\n    svg.call(d3.zoom()\n      .scaleExtent([0.1, 4])\n      .on(\"zoom\", (event) => {\n        g.attr(\"transform\", event.transform);\n      }));\n\n    const tooltip = d3.select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"opacity\", 0);\n\n    const link = g.append(\"g\")\n      .selectAll(\"line\")\n      .data(data.links)\n      .join(\"line\")\n      .attr(\"class\", \"link\");\n\n    const node = g.append(\"g\")\n      .selectAll(\"circle\")\n      .data(data.nodes)\n      .join(\"circle\")\n      .attr(\"class\", \"node\")\n      .attr(\"r\", d => Math.max(6, Math.min(12, 6 + Math.sqrt(d.incomingLinks + d.outgoingLinks))))\n      .attr(\"fill\", d => d3.schemeCategory10[d.id % 10])\n      .on(\"click\", highlightChain)\n      .on(\"mouseover\", showTooltip)\n      .on(\"mouseout\", hideTooltip)\n      .call(drag(simulation));\n\n    const label = g.append(\"g\")\n      .selectAll(\"text\")\n      .data(data.nodes)\n      .join(\"text\")\n      .attr(\"class\", \"node-label\")\n      .text(d => d.label)\n      .attr(\"x\", 12)\n      .attr(\"y\", 3);\n\n    function showTooltip(event, d) {\n      tooltip.transition()\n        .duration(200)\n        .style(\"opacity\", .9);\n      tooltip.html(\n        \\`<strong>\\${d.url}</strong>\n         <div class=\"stats\">\n           Incoming links: \\${d.incomingLinks}<br>\n           Outgoing links: \\${d.outgoingLinks}\n         </div>\\`\n      )\n        .style(\"left\", (event.pageX + 10) + \"px\")\n        .style(\"top\", (event.pageY - 10) + \"px\");\n    }\n\n    function hideTooltip() {\n      tooltip.transition()\n        .duration(500)\n        .style(\"opacity\", 0);\n    }\n\n    function highlightChain(event, d) {\n      // Find connected nodes and links\n      const connectedLinks = data.links.filter(l => \n        l.source.id === d.id || l.source === d.id || \n        l.target.id === d.id || l.target === d.id\n      );\n      \n      const connectedNodes = new Set();\n      connectedLinks.forEach(l => {\n        connectedNodes.add(l.source.id || l.source);\n        connectedNodes.add(l.target.id || l.target);\n      });\n\n      // Update visual states\n      link\n        .classed(\"highlighted\", l => connectedLinks.includes(l))\n        .classed(\"dimmed\", l => !connectedLinks.includes(l));\n      \n      node\n        .classed(\"dimmed\", n => !connectedNodes.has(n.id));\n      \n      label\n        .classed(\"dimmed\", n => !connectedNodes.has(n.id));\n    }\n\n    // Reset highlight when clicking on background\n    svg.on(\"click\", (event) => {\n      if (event.target.tagName === \"svg\") {\n        link\n          .classed(\"highlighted\", false)\n          .classed(\"dimmed\", false);\n        node\n          .classed(\"dimmed\", false);\n        label\n          .classed(\"dimmed\", false);\n      }\n    });\n\n    function drag(simulation) {\n      function dragstarted(event) {\n        if (!event.active) simulation.alphaTarget(0.1).restart();\n        event.subject.fx = event.subject.x;\n        event.subject.fy = event.subject.y;\n      }\n      \n      function dragged(event) {\n        event.subject.fx = event.x;\n        event.subject.fy = event.y;\n      }\n      \n      function dragended(event) {\n        if (!event.active) simulation.alphaTarget(0);\n        event.subject.fx = event.x;\n        event.subject.fy = event.y;\n      }\n      \n      return d3.drag()\n        .on(\"start\", dragstarted)\n        .on(\"drag\", dragged)\n        .on(\"end\", dragended);\n    }\n\n    // Initial positions based on grid\n    simulation.nodes(data.nodes).tick(100);\n\n    simulation.on(\"tick\", () => {\n      link\n        .attr(\"x1\", d => d.source.x)\n        .attr(\"y1\", d => d.source.y)\n        .attr(\"x2\", d => d.target.x)\n        .attr(\"y2\", d => d.target.y);\n\n      node\n        .attr(\"cx\", d => d.x)\n        .attr(\"cy\", d => d.y);\n\n      label\n        .attr(\"x\", d => d.x + 12)\n        .attr(\"y\", d => d.y + 3);\n    });\n  </script>\n</body>\n</html>`;\n}\n\nasync function main(domain) {\n  try {\n    console.time('Crawl Duration');\n    const pageAnalyses = await analyzeDomain(domain);\n    console.timeEnd('Crawl Duration');\n    \n    const report = generateAnalysisReport(pageAnalyses);\n    const chartData = generateChartData(pageAnalyses);\n    const visualization = generateVisualizationHtml({ chartData });\n\n    return {\n      sitemap: generateSitemap(Array.from(pageAnalyses.keys())),\n      report,\n      visualization\n    };\n  } catch (error) {\n    console.error('Error in main:', error);\n    throw error;\n  }\n}\n\n// n8n integration\nconst domain = $json[\"domain\"];\nreturn main(domain)\n  .then(result => {\n    return [result];\n  })\n  .catch(error => {\n    console.error('Error:', error.message);\n    return [{ error: error.message }];\n  });"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        240,
        -200
      ],
      "id": "bd56f077-7a68-4812-b1b9-8cf6dd472f04",
      "name": "Optimized scraper✅✅"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        660,
        -80
      ],
      "id": "4a95ae3e-4582-4d88-bd6b-e73d6bf93c8e",
      "name": "Connect your storage tool"
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "dev.funautomations.io",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36",
            "content-length": "141",
            "accept": "*/*",
            "accept-encoding": "gzip, deflate, br, zstd",
            "accept-language": "en-US,en;q=0.9",
            "content-type": "application/json",
            "dnt": "1",
            "origin": "https://zp1v56uxy8rdx5ypatb0ockcb9tr6a-oci3--5173--1b4252dd.local-credentialless.webcontainer-api.io",
            "priority": "u=1, i",
            "referer": "https://zp1v56uxy8rdx5ypatb0ockcb9tr6a-oci3--5173--1b4252dd.local-credentialless.webcontainer-api.io/",
            "sec-ch-ua": "\"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"",
            "sec-ch-ua-mobile": "?0",
            "sec-ch-ua-platform": "\"Windows\"",
            "sec-fetch-dest": "empty",
            "sec-fetch-mode": "cors",
            "sec-fetch-site": "cross-site",
            "x-forwarded-for": "102.219.208.122",
            "x-forwarded-host": "dev.funautomations.io",
            "x-forwarded-proto": "https"
          },
          "params": {},
          "query": {},
          "body": {
            "taskId": "48ceb722-8efd-4aee-af48-d9f98790ddaf",
            "url": "https://funautomations.io/",
            "domains": [
              "funautomations.io"
            ],
            "depth": 2,
            "pageLimit": 50
          },
          "webhookUrl": "https://dev.funautomations.io/webhook/6faef80a-ae16-4655-aff7-2ef1e07065eb",
          "executionMode": "production"
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1",
    "errorWorkflow": "2gLR5bciIZCpJZRE"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-12-04T12:32:00.284Z",
      "updatedAt": "2024-12-04T12:32:00.284Z",
      "id": "bNah9fcKNwQQBzJ1",
      "name": "SEO DOCTOR"
    },
    {
      "createdAt": "2024-12-03T14:36:18.275Z",
      "updatedAt": "2024-12-03T14:36:18.275Z",
      "id": "koKAFcp5uch8EPTB",
      "name": "Public"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-04-06T08:00:26.854Z",
  "versionId": "98c42cd5-0b93-4f47-ba23-dda511912581"
}